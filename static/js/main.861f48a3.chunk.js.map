{"version":3,"sources":["components/search-bar/SearchBar.component.jsx","components/card/Card.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","handleChange","type","placeholder","onChange","Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAY,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACvB,OACI,uBAAOC,KAAK,SACRC,YAAY,gBACZC,SAAUH,MCJTI,G,YAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAI,cACnE,6BAAKL,EAAMG,QAAQG,OACnB,6BAAKN,EAAMG,QAAQI,aCJlBC,EAAW,SAACR,GAGrB,OACI,qBAAKC,UAAU,aAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAP,GACf,OAAO,cAAC,EAAD,CAAMA,QAASA,GAAcA,EAAQC,UCsDjDO,E,kDAzDb,aAAe,IAAD,8BACZ,gBAiBFhB,aAAe,SAACiB,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAhBrC,EAAKC,MAAQ,CACXR,SAAU,GACVK,YAAa,IALH,E,gEAYO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACJ,SAAUa,S,+BAmBhC,IAAD,EACyBC,KAAKN,MAA9BR,EADA,EACAA,SAAUK,EADV,EACUA,YACXU,EAAmBf,EAASgB,QAAO,SAAAtB,GAAO,OAAIA,EAAQG,KAAKoB,cAAcC,SAASb,EAAYY,kBAMpG,OACE,sBAAKzB,UAAU,MAAf,UACE,oBAAIA,UAAU,UAAd,+CACA,cAAC,EAAD,CAAWN,aAAc4B,KAAK5B,eAM9B,cAAC,EAAD,CAAUc,SAAUe,W,GArDVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.861f48a3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.style.css';\r\n\r\nexport const SearchBar = ({handleChange}) => {\r\n    return (\r\n        <input type=\"search\"\r\n            placeholder=\"Search Member\"\r\n            onChange={handleChange}\r\n        ></input>\r\n    )\r\n}","import React from 'react';\r\nimport './Card.style.css';\r\n\r\nexport const Card = props => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt=\"someImage\"></img>\r\n            <h2>{props.monster.name}</h2>\r\n            <h3>{props.monster.email}</h3>\r\n            {/* {console.log(props.monster)} */}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './card-list.style.css';\r\nimport { Card } from '../card/Card';\r\n\r\nexport const CardList = (props) => {\r\n    // console.log(props.monsters);\r\n\r\n    return (\r\n        <div className=\"class-list\">\r\n            {\r\n                props.monsters.map(monster => {\r\n                    return <Card monster={monster} key={monster.id} />\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {SearchBar} from './components/search-bar/SearchBar.component';\r\nimport {CardList} from './components/card-list/card-list.component';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: ''\r\n    }\r\n\r\n    // this.handleChange = this.handleChange.bind(this); \r\n    //When not using arrow fun() to define a method have to explicitly bind that fun() with context of 'this'\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({monsters: users}))\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({searchField: e.target.value})\r\n  }\r\n\r\n  //this.state can hold all the dynamic and processing data and many more\r\n  //this.state can be change on runtime as we change in the pure js individually\r\n  //{ 'everything inside this is a javaScript expression' }\r\n  //When state change we re-render the component with new state\r\n  //JSX is just mimic the HTML but it is different, it is actually js, so that we can create the virtual DOM.\r\n  //have to call this.setState() to update the state.\r\n  //We can't directly update the state like this.state.string = \"something\", because react has 1 way data flow.\r\n  //Each element or component must have a key so that react can distinguish it & can update it individual when a change occurs\r\n  //this.setState() is a asynchronous function()\r\n  //we can't call setState() inside the render because, when setState() is called the component is re-render & the again setState and then again re-render this will gonna make a loop  \r\n  //arrow func() get the context by itself, use lexical scoping \r\n\r\n  render() {\r\n    const {monsters, searchField} = this.state;\r\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\r\n\r\n    // const handleChange = e => {\r\n    //   this.setState({searchField: e.target.value})\r\n    // }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className=\"heading\">MONSTERS &nbsp;&nbsp;&nbsp;&nbsp; ROLODEX</h1>\r\n        <SearchBar handleChange={this.handleChange}/>\r\n        {/* <input type=\"search\" \r\n        placeholder=\"Search Monsters\"\r\n        onChange={(e) => this.setState({searchField: e.target.value})}\r\n        /> */}\r\n\r\n        <CardList monsters={filteredMonsters}/>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}